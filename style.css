/*
=============== 
Fonts
===============
*/
@import url("https://fonts.googleapis.com/css?family=Open+Sans|Roboto:400,700&display=swap");

/*
=============== 
Variables
===============
*/

:root {
  /* dark shades of primary color*/
  --clr-primary-1: hsl(205, 86%, 17%);
  --clr-primary-2: hsl(205, 77%, 27%);
  --clr-primary-3: hsl(205, 72%, 37%);
  --clr-primary-4: hsl(205, 63%, 48%);
  /* primary/main color */
  --clr-primary-5: #49a6e9;
  /* lighter shades of primary color */
  --clr-primary-6: hsl(205, 89%, 70%);
  --clr-primary-7: hsl(205, 90%, 76%);
  --clr-primary-8: hsl(205, 86%, 81%);
  --clr-primary-9: hsl(205, 90%, 88%);
  --clr-primary-10: hsl(205, 100%, 96%);
  /* darkest grey - used for headings */
  --clr-grey-1: hsl(209, 61%, 16%);
  --clr-grey-2: hsl(211, 39%, 23%);
  --clr-grey-3: hsl(209, 34%, 30%);
  --clr-grey-4: hsl(209, 28%, 39%);
  /* grey used for paragraphs */
  --clr-grey-5: hsl(210, 22%, 49%);
  --clr-grey-6: hsl(209, 23%, 60%);
  --clr-grey-7: hsl(211, 27%, 70%);
  --clr-grey-8: hsl(210, 31%, 80%);
  --clr-grey-9: hsl(212, 33%, 89%);
  --clr-grey-10: hsl(210, 36%, 96%);
  --clr-white: #fff;
  --clr-red-dark: hsl(360, 67%, 44%);
  --clr-red-light: hsl(360, 71%, 66%);
  --clr-green-dark: hsl(125, 67%, 44%);
  --clr-green-light: hsl(125, 71%, 66%);
  --clr-black: #222;
  --ff-primary: "Roboto", sans-serif;
  --ff-secondary: "Open Sans", sans-serif;
  --transition: all 0.3s linear;
  --spacing: 0.25rem;
  --radius: 0.5rem;
  --light-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  --dark-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  --max-width: 1170px;
  --fixed-width: 620px;
}
/*
=============== 
Global Styles
===============
*/

*,
::after,
::before {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
body {
  font-family: var(--ff-secondary);
  background: var(--clr-grey-10);
  color: var(--clr-grey-1);
  line-height: 1.5;
  font-size: 0.875rem;
}
ul {
  list-style-type: none;
}
a {
  text-decoration: none;
}
img:not(.person-img) {
  width: 100%;
}
img {
  display: block;
}

h1,
h2,
h3,
h4 {
  letter-spacing: var(--spacing);
  text-transform: capitalize;
  line-height: 1.25;
  margin-bottom: 0.75rem;
  font-family: var(--ff-primary);
}
h1 {
  font-size: 3rem;
}
h2 {
  font-size: 2rem;
}
h3 {
  font-size: 1.25rem;
}
h4 {
  font-size: 0.875rem;
}
p {
  margin-bottom: 1.25rem;
  color: var(--clr-grey-5);
}
@media screen and (min-width: 800px) {
  h1 {
    font-size: 4rem;
  }
  h2 {
    font-size: 2.5rem;
  }
  h3 {
    font-size: 1.75rem;
  }
  h4 {
    font-size: 1rem;
  }
  body {
    font-size: 1rem;
  }
  h1,
  h2,
  h3,
  h4 {
    line-height: 1;
  }
}
/*  global classes */

.btn {
  text-transform: uppercase;
  background: transparent;
  color: var(--clr-black);
  padding: 0.375rem 0.75rem;
  letter-spacing: var(--spacing);
  display: inline-block;
  transition: var(--transition);
  font-size: 0.875rem;
  border: 2px solid var(--clr-black);
  cursor: pointer;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  border-radius: var(--radius);
}
.btn:hover {
  color: var(--clr-white);
  background: var(--clr-black);
}
/* section */
.section {
  padding: 5rem 0;
}

.section-center {
  width: 90vw;
  margin: 0 auto;
  max-width: 1170px;
}
@media screen and (min-width: 992px) {
  .section-center {
    width: 95vw;
  }
}
main {
  min-height: 100vh;
  display: grid;
  place-items: center;
}
/*
=============== 
Slider
===============
*/

/* 
항상 
슬라이더 컨테이너의 position: relative
슬라이드의 position: absolute 
로 해줄 것.

또 
슬라이더 컨테이너는 특정 width와 height값을 지정해줄 것.
슬라이드의 width, height은 100%로 해줄 것.

앞으로 슬라이더 만들 일이 있으면 코멘트 처리된 부분 잘 읽고 따라서 만들면 됨.
*/
.slider-container {
  border: 5px solid var(--clr-primary-5);
  width: 80vw;
  margin: 0 auto;
  height: 40vh;
  max-width: 80rem;
  position: relative;
  border-radius: 0.5rem;
  overflow: hidden; 
  /* overflow: hidden; 덕분에 슬라이더 컨테이너에서 벗어난 슬라이드 띠 부분들이 안보이는 거 */
  margin-top: 4rem;
}
.slide {
  position: absolute;
  width: 100%;
  height: 100%;
  background: var(--clr-primary-9);
  color: var(--clr-white);
  display: grid;
  place-items: center;
  transition: all 0.25s ease-in-out;
  /* slide의 css에 transition을 줘야 슬라이드 띠가 자연스럽게 이동할 수 있음. */
  text-align: center;
}
.slide-img {
  height: 100%;
  object-fit: cover;
}
.slide h1 {
  font-size: 5rem;
}
.person-img {
  border-radius: 50%;
  width: 6rem;
  height: 6rem;
  margin: 0 auto;
  margin-bottom: 1rem;
}
.slide:nth-child(1) h1 {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
.slide:nth-child(3) {
  background: linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)),
    url("./img-2.jpeg") center/cover no-repeat;
}
.btn-container {
  display: flex;
  justify-content: center;
  margin-top: 0.75rem;
}
.prevBtn,
.nextBtn {
  background: transparent;
  border-color: transparent;
  font-size: 1.75rem;
  cursor: pointer;
  margin: 0 0.25rem;
  text-transform: capitalize;
  letter-spacing: 2px;
  color: var(--clr-grey-5);
  transition: var(--transition);
}
.prevBtn:hover,
.nextBtn:hover {
  color: var(--clr-grey-3);
}

@media screen and (min-width: 576px) {
  .slider-container {
    height: 45vh;
  }
}
@media screen and (min-width: 768px) {
  .slider-container {
    height: 55vh;
  }
}
@media screen and (min-width: 992px) {
  .slider-container {
    height: 65vh;
  }
}

/*  
위에서 슬라이더 컨테이너와 슬라이드의 css를 지정해주고 나서
slide의 각각의 엘레먼트의 left값을 100% 차이만큼 지정해줄 것.
이렇게 하면 결국 슬라이드들이 1~4 순서대로 왼쪽에서 오른쪽으로 일렬로 붙어서 '슬라이드 띠'를 형성함.

그런 상태에서 transform: translateX()값을 100% 단위로 컨트롤해주면
각각의 슬라이드가 슬라이더 컨테이너의 width 딱 맞춰지게 이동해서 보여지겠지? 
*/
/* 
.slide:nth-child(1){
  left: 0;
}
.slide:nth-child(2){
  left: 100%;
}
.slide:nth-child(3){
  left: 200%;
}
.slide:nth-child(4){
  left: 300%;
}
.slide{
  transform: translateX(0%);
} 
*/
/* negative value moves to left */
/* 
-100%로 이동하면 슬라이드 띠가 왼쪽으로 이동할 거고, 100%로 하면 슬라이드 띠가 오른쪽으로 이동할 것이라는 뜻. 
슬라이드 띠가 전체적으로 왼쪽으로 이동하면 두 번째 슬라이드가 슬라이더 컨테이너에 맞춰지겠지? 
*/

/* 
이거를 css에 작성해놓은 이유는 대충 이런 원리로 슬라이드 띠를 형성해서 그걸 움직일 수 있다는 걸 보여주는 거임.
이제 이걸 자바스크립트로 동적으로 움직여야겠지.

그리고 이걸 css로 지정하는 것보다 자바스크립트로 컨트롤하는 게 더 좋은 이유가 뭐냐면
html에서 슬라이드를 더 추가하다보면 css에도 이런식으로 추가된 슬라이드마다 left값을 직접 지정해야 하지만
자바스크립트로 컨트롤하면 굳이 css는 건들지 않고도 그냥 html에 요소만 추가해줘도 알아서 잘 됨.
*/

